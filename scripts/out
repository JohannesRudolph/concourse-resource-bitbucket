#!/usr/bin/env python

import subprocess
import os
import sys
import json
from bitbucket import BitbucketException, BitbucketCloudDriver, BitbucketServerDriver, set_build_status
from concourse import print_error
from helper import json_pp

config = json.loads(sys.stdin.read())

debug = config['source'].get('debug', False)

if debug:
    print_error("--DEBUG MODE--")

# Configuration vars
driver = config['source'].get('driver', 'Bitbucket Server')

build_status = config['params'].get('build_status', config['params'].get('state'))
artifact_dir = "%s/%s" % (sys.argv[1], config['params']['repo'])

if driver == 'Bitbucket Server':
    driver = BitbucketServerDriver(config, debug)
elif driver == 'Bitbucket Cloud':
    driver = BitbucketCloudDriver(config, debug)
else:
    print_error("Invalid driver, must be: 'Bitbucket Server' or 'Bitbucket Cloud'")
    exit(1)


# The build status can only be one of three things
if build_status not in ['INPROGRESS', 'SUCCESSFUL', 'FAILED']:
    print_error("Invalid build status, must be: INPROGRESS, SUCCESSFUL, or FAILED")
    exit(1)

commit_hash = ''

# Try and find out if it's a git or hg repo.
if os.path.exists(os.path.join(artifact_dir, '.hg')):
    commit_hash = subprocess.check_output(
        ['hg', '-R', artifact_dir, 'log', '--rev', '.', '--template', '{node}']
    ).strip().decode()
elif os.path.exists(os.path.join(artifact_dir, '.git')):
    commit_hash = subprocess.check_output(
        ['git', '-C', artifact_dir, 'rev-parse', 'HEAD']
    ).strip().decode()
else:
    print_error("Cannot detect a repository.")
    exit(1)

if debug:
    print_error("Commit: " + str(commit_hash))

if "build_url_file" in config["params"]:
        with open(os.path.join(sys.argv[1], config["params"]["build_url_file"]), "r") as fp:
            build_url = fp.readlines()[0]
else:
    maybe_team = 'teams/{team}/'.format(team=os.environ['BUILD_TEAM_NAME']) if 'BUILD_TEAM_NAME' in os.environ else ''
    build_url = "{url}/{maybe_team}pipelines/{pipeline}/jobs/{jobname}/builds/{buildname}".format(
        url=os.environ['ATC_EXTERNAL_URL'],
        maybe_team=maybe_team,
        pipeline=os.environ['BUILD_PIPELINE_NAME'],
        jobname=os.environ['BUILD_JOB_NAME'],
        buildname=os.environ['BUILD_NAME'],
    )

if debug:
    print_error(build_url)

if "key" in config["params"]:
    key = config["params"]["key"]
else:
    key = os.environ["BUILD_JOB_NAME"]

if "name" in config["params"]:
    name = config["params"]["name"]
else:
    name = os.environ["BUILD_NAME"]

if "description_file" in config["params"]:
    with open(os.path.join(sys.argv[1], config["params"]["description_file"]), "r") as fp:
        description = fp.read()
else:
    description = "Concourse CI build, hijack as #{0}".format(os.environ["BUILD_ID"])

# Do the update.
try:
    # provide default values as these env vars will be unset in one-off builds
    # see also http://concourse.ci/implementing-resources.html
    pipeline = os.environ.get('BUILD_PIPELINE_NAME', '_pipeline_')
    job = os.environ.get('BUILD_JOB_NAME', '_job_'),
    build_name = os.environ.get('BUILD_NAME', '_build#_') # name within job
    build_id = os.environ['BUILD_ID'] # internal, unique build id in Concourse

    set_build_status(
        commit_hash=commit_hash,
        build_status=build_status,
        key=key,
        name=name,
        url=build_url,
        description=description,
        debug=debug,
        driver=driver
    )

except BitbucketException as e:
    print_error(str(e))
    exit(1)

status = {"version": {"ref": commit_hash}}

if debug:
    print_error("Returning to Concourse:\n" + json_pp(status))

print(json.dumps(status))
