#!/usr/bin/env python

import subprocess
import os
import sys
import json
from bitbucket import (
    json_pp, err, set_build_status, BitbucketException, BitbucketCloudDriver, BitbucketServerDriver
)

j = json.loads(sys.stdin.read())

debug = j['source'].get('debug', False)

if debug:
    err("--DEBUG MODE--")

# Configuration vars
driver = j['source'].get('driver', 'Bitbucket Server')

state = j['params'].get('state', j['params'].get('build_status'))
artifact_dir = "%s/%s" % (sys.argv[1], j['params']['repo'])

repo = ''
username = ''
password = ''
client_id = ''
secret = ''
endpoint = ''
verify_ssl = True

if driver == 'Bitbucket Server':
    driver = BitbucketServerDriver(j)
elif driver == 'Bitbucket Cloud':
    driver = BitbucketCloudDriver(j)
else:
    err("Invalid driver, must be: Bitbucket Server or Bitbucket Cloud")
    exit(1)


# The build status can only be one of three things
if state not in ['INPROGRESS', 'SUCCESSFUL', 'FAILED']:
    err("Invalid build status, must be: INPROGRESS, SUCCESSFUL, or FAILED")
    exit(1)

# Try and find out if it's a git or hg repo.
if os.path.exists(os.path.join(artifact_dir, '.hg')):
    repository_type = 'mercurial'
elif os.path.exists(os.path.join(artifact_dir, '.git')):
    repository_type = 'git'
else:
    repository_type = ''
    err("Cannot detect a repo.")
    exit(1)

if repository_type == 'git':
    commit_sha = subprocess.check_output(
            ['git', '-C', artifact_dir, 'rev-parse', 'HEAD']
    ).strip()
else:
    commit_sha = subprocess.check_output(
        ['hg', '-R', artifact_dir, 'log', '--rev', '.', '--template', '{node}']
    ).strip()

if debug:
    err("Commit: " + str(commit_sha))

if "build_url_file" in j["params"]:
        with open(os.path.join(sys.argv[1], j["params"]["build_url_file"]), "r") as fp:
            build_url = fp.readlines()[0]
elif 'BUILD_TEAM_NAME' in os.environ:
    build_url = "{url}/teams/{team}/pipelines/{pipeline}/jobs/{jobname}/builds/{buildname}".format(
        url=os.environ['ATC_EXTERNAL_URL'],
        team=os.environ['BUILD_TEAM_NAME'],
        pipeline=os.environ['BUILD_PIPELINE_NAME'],
        jobname=os.environ['BUILD_JOB_NAME'],
        buildname=os.environ['BUILD_NAME'],
    )
else:
    build_url = "{url}/pipelines/{pipeline}/jobs/{jobname}/builds/{buildname}".format(
        url=os.environ['ATC_EXTERNAL_URL'],
        pipeline=os.environ['BUILD_PIPELINE_NAME'],
        jobname=os.environ['BUILD_JOB_NAME'],
        buildname=os.environ['BUILD_NAME'],
    )

if debug:
    err(build_url)

if "key" in j["params"]:
    key = j["params"]["key"]
else:
    key = os.environ["BUILD_JOB_NAME"]

if "name" in j["params"]:
    name = j["params"]["name"]
else:
    name = os.environ["BUILD_NAME"]

if "description_file" in j["params"]:
    with open(os.path.join(sys.argv[1], j["params"]["description_file"]), "r") as fp:
        description = fp.read()
else:
    description = "Concourse CI build, hijack as #{0}".format(os.environ["BUILD_ID"])

# Do the update.
try:
    # provide default values as these env vars will be unset in one-off builds
    # see also http://concourse.ci/implementing-resources.html
    pipeline = os.environ.get('BUILD_PIPELINE_NAME', '_pipeline_')
    job = os.environ.get('BUILD_JOB_NAME', '_job_'),
    build_name = os.environ.get('BUILD_NAME', '_build#_') # name within job
    build_id = os.environ['BUILD_ID'] # internal, unique build id in concurse

    slug = "{0}/{1} #{2}".format(pipeline, job, build_name)
    set_build_status(
        repo=repo,
        commit_hash=commit_sha,
        state=state,
        key=key,
        name=name,
        url=build_url,
        description=description,
        debug=debug,
        driver=driver,
        endpoint=endpoint,
        username=username,
        password=password,
        verify_ssl=verify_ssl
    )

except BitbucketException as e:
    err(str(e))
    exit(1)

status_js = {"version": {"ref": commit_sha}}

if debug:
    err("Returning to concourse:\n" + json_pp(status_js))

print(json.dumps(status_js))
